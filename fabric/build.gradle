plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
}

repositories {
	maven {
		name = "Terraformers"
		url = "https://maven.terraformersmc.com/"
	}
    maven {
        url "https://maven.nucleoid.xyz/"
        name "Nucleoid"
    }

	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"

    def addEmbeddedFabricModule = { name ->
        def module = fabricApi.module(name, fabric_version)
        modImplementation module
        include module
    }
    addEmbeddedFabricModule "fabric-api-base"
    addEmbeddedFabricModule "fabric-key-binding-api-v1"
    addEmbeddedFabricModule "fabric-lifecycle-events-v1"
    addEmbeddedFabricModule "fabric-resource-loader-v0"
    addEmbeddedFabricModule "fabric-screen-api-v1"

    modCompileOnly "com.terraformersmc:modmenu:${project.modmenu_version}"
	modCompileOnly "maven.modrinth:command-block-ide:${project.command_block_ide_version}"
}

loom {
    def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('runs/client')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
    }
}

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}